const { Client } = require('@neondatabase/serverless');
const ws = require('ws'); 
const bcrypt = require('bcrypt');
const { users, patients } = require('../src/app/lib/data/placeholderData.js');
const { separateFullName, toTitleCase, checkAndConvertDate } = require('../src/app/lib/utils-module.js');

const ENV = process.env.NODE_ENV;

async function createClient() {
    const client = new Client(process.env.DATABASE_URL);
    if (process.env.POSTGRES_HOST == "localhost") {
        client.neonConfig.webSocketConstructor = ws;
        client.neonConfig.wsProxy = (host) => `${host}:5433/v1`;
        client.neonConfig.useSecureWebSocket = false;
        client.neonConfig.pipelineTLS = false;
        client.neonConfig.pipelineConnect = false;    
    }
    return client;  
}

async function clearData(client) {
    try {
        const result = await client.query('DROP TABLE IF EXISTS patients');
        console.log(`Dropped patients table. Command: ${result.command}`);

    }catch (error) {
        console.error('Error with Database: ', error);
    }
}

async function createUsers(client) {
    try {
        await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS users (
          id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          email TEXT NOT NULL UNIQUE,
          password TEXT NOT NULL
        );
        `;
        console.log(`Created "users" table`);
      
        // Insert data into the "users" table
        const insertedUsers = await Promise.all(
            users.map(async (user) => {
            const hashedPassword = await bcrypt.hash(user.password, 10);
            return client.sql`
            INSERT INTO users (name, email, password)
            VALUES (${user.name}, ${user.email}, ${hashedPassword})
            ON CONFLICT (id) DO NOTHING;
            `;
            }),
        );
    
        console.log(`Seeded ${insertedUsers.length} users`);
    
        return {
            createTable,
            users: insertedUsers,
        };        

    } catch(error) {
        console.error('Error with Database interaction:', error);
        throw error;
    }
}

async function initPatients(client) {
    try {

        const result = await client.query(`
            CREATE TABLE IF NOT EXISTS patients (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,          
                first_name VARCHAR(100) NOT NULL,
                middle_name VARCHAR(255) NOT NULL,
                last_name VARCHAR(100) NOT NULL,
                birth_year INT NOT NULL,
                gender VARCHAR(255) NOT NULL,
                address VARCHAR(255) NOT NULL,
                phone VARCHAR(255) NOT NULL
            )`);
        console.log(`Created "patients" table. Command: ${result.command}`);

        const insertedPatients = await Promise.all(
            patients.map((patient) => {
                    const nNames = separateFullName(patient.name);
                    console.log(nNames);
                    return client.query("INSERT INTO patients (first_name, middle_name, last_name, birth_year, gender, address, phone) VALUES ($1, $2, $3, $4, $5, $6, $7)", [nNames[0], nNames[1], nNames[2], patient.birth_year, patient.gender, patient.address, patient.phone]);
                }
            ),
        );
        console.log(`Inserted ${insertedPatients.length} patients.`);
        for (let p of insertedPatients) {
            console.log(p);
        }
        
    }catch (error) {
        console.error('Error with Database in initPatients: ', error);
    }
}


async function createPatients(client, insertData = true) {
    try {
        // drop table patients;
        const createTable = await client.query(`
        CREATE TABLE IF NOT EXISTS patients (
            id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,          
            first_name VARCHAR(100) NOT NULL,
            middle_name VARCHAR(255) NOT NULL,
            last_name VARCHAR(100) NOT NULL,
            birth_year INT NOT NULL,
            gender VARCHAR(255) NOT NULL,
            address VARCHAR(255) NOT NULL,
            phone VARCHAR(255) NOT NULL
        )`);
        console.log(`Created "patients" table`);
        let insertedPatients = null;

        if (insertData) {
        // Insert data into the "patients" table
            insertedPatients = await Promise.all(
                patients.map(
                    (patient) => {
                        const nNames = separateFullName(patient.name);
                        console.log(nNames);
                        return client.query(`
                            INSERT INTO patients (first_name, middle_name, last_name, birth_year, gender, address, phone)
                            VALUES (${nNames[0]}, ${nNames[1]}, ${nNames[2]}, ${patient.birth_year}, ${patient.gender}, ${patient.address}, ${patient.phone});
                        `)
                    }
                ),
            );
            console.log(`Seeded ${insertedPatients.length} patients`);
        }

        return {
            createTable,
            users: insertedPatients,
        };

    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function createMedicalRecords(client, insertData = true) {
    try {
        const createTable = await client.query(`
        CREATE TABLE IF NOT EXISTS medical_records (
            pid INT PRIMARY KEY,
            height NUMERIC(3, 1) NOT NULL,
            weight INT NOT NULL,
            blood_pressure_sys INT NOT NULL,
            blood_pressure_dia INT NOT NULL,
            pulse INT NOT NULL,
            hospitalized BOOLEAN NOT NULL,
            hospitalized_declare VARCHAR(255),
            suffered JSON NOT NULL
        );
        `);
        console.log(`Created "medical_records" table`);

        let insertedMedicalInfo = null;

        if (insertData) {
            // Insert data into the "medical_records" table
            insertedMedicalInfo = await Promise.all(
                patients.map(
                    (patient) => client.query(`
                    INSERT INTO medical_records (pid, height, weight, blood_pressure_sys, blood_pressure_dia, pulse, hospitalized, hospitalized_declare, suffered)
                    VALUES (${patient.id}, ${patient.medicalInfo.height}, ${patient.medicalInfo.weight}, ${patient.medicalInfo.blood_pressure_sys}, 
                        ${patient.medicalInfo.blood_pressure_dia}, ${patient.medicalInfo.pulse}, ${patient.medicalInfo.hospitalized}, 
                        ${patient.medicalInfo.hospitalized_declare}, ${patient.medicalInfo.suffered});
                `),
                ),
            );
            console.log(`Seeded ${insertedMedicalInfo.length} patients`);
        }

        return {
            createTable,
            users: insertedMedicalInfo,
        };

    }catch(error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function createDentalRecords(client, insertData = true) {
    try {
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS dental_records (
            pid INT PRIMARY KEY,
            tooth_diagram text[][],
            description VARCHAR(255)
        );
        `;
        console.log(`Created "dental_records" table`);

        let insertedDentalRecords = null;

        if (insertData) {

            // Insert data into the "dental_records" table
            insertedDentalRecords = await Promise.all(
                patients.map(
                    (patient) => client.sql`
                    INSERT INTO dental_records (pid, tooth_diagram, description)
                    VALUES (${patient.id}, ${patient.dentalRecords.tooth_diagram}, ${patient.dentalRecords.description})
                    `,
                ),
            );
            console.log(`Seeded ${insertedDentalRecords.length} patients`);
        }

        return {
            createTable,
            info: insertedDentalRecords,
        };
    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}


async function insertTreatmentRecords(client, treatmentRecords, id) {
    const insertedTreatmentRecords = await Promise.all(
        treatmentRecords.map((record) => {
            const treatment = JSON.stringify(record.treatments);
            console.log(treatment);
            return client.sql`
                INSERT INTO treatment_records (pid, exam_date, diagnoses, treatments, amount, paid)
                VALUES (${id}, ${record.exam_date}, ${record.diagnoses}, 
                        ${treatment},
                        ${record.amount}, ${record.paid});

                `;
        })
        ,
    );

    console.log(`Seeded ${insertedTreatmentRecords.length} treatment_records`);
    console.log(insertedTreatmentRecords);
    return insertTreatmentRecords;
}

async function createTreatementRecords(client, insertData = true) {
    try {
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS treatment_records (
            pid INT NOT NULL,
            exam_date DATE NOT NULL, 
            diagnoses VARCHAR NOT NULL,
            treatments JSONB,
            amount INT NOT NULL,
            paid BOOLEAN NOT NULL,
            PRIMARY KEY (pid, exam_date)
        );
        `;
        console.log(`Created "treatment_records" table`);
        //console.log(createTable);

        let insertedTreatmentRecords = null;

        if (insertData) {
            // Insert data into the "treatment_records" table
            insertedTreatmentRecords = await Promise.all(
                patients.map((patient) => insertTreatmentRecords(client, patient.treatmentRecords, patient.id)),
            );

            console.log(`Seeded ${insertedTreatmentRecords.length} treatment_records`);
            console.log(insertedTreatmentRecords);
        }

        return {
            createTable,
            info: insertedTreatmentRecords,
        };
    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

function test() {
    const [isD, nValue] = checkAndConvertDate('31/12/2024');
    
    console.log(`${isD} , ${nValue}`);

}


async function getClient(pool) {
    try {
      const client = await pool.connect();
      console.log('Connected to PostgreSQL Pool');
      
      return client;
    } catch (err) {
      console.error('Error connecting to PostgreSQL', err);
    }
  }
  
async function main1() {
    const dotenv = require('dotenv');
    dotenv.config({path: `.env.development`});
    
    console.log(`DB URL: ${process.env.POSTGRES_URL}`);

    const client = new Client({
        host: process.env.HOST,
        port: process.env.PORT,
        user: process.env.POSTGRES_USER,
        password: process.env.POSTGRES_PASSWORD,
        database: process.env.POSTGRES_DATABASE
      });

    console.log(`DB URL: ${client.user}:${client.password}@${client.host}:${client.port}/${client.database}`);

    client.connect()
        .then(() => console.log('Connected to PostgreSQL'))
        .catch(err => console.error('Connection error', err.stack));
    
    //createTables(client);

    const res = await client.query(`
        CREATE TABLE IF NOT EXISTS patients (
            id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,          
            first_name VARCHAR(100) NOT NULL,
            middle_name VARCHAR(255) NOT NULL,
            last_name VARCHAR(100) NOT NULL,
            birth_year INT NOT NULL,
            gender VARCHAR(255) NOT NULL,
            address VARCHAR(255) NOT NULL,
            phone VARCHAR(255) NOT NULL
        )`);
    console.log(res);
    
    client.end();    
}



async function main() {
    console.log(`env: ${ENV}`);
    let client;
    try {
        client = await createClient();
        await client.connect();
        console.log(`Connected to PostgreSQL: ${client.config}`);

        await clearData(client);
        await initPatients(client);    
    
    }catch(error) {
        console.error('Error with Database: ', error);
    }finally {
        if (typeof client !== "undefined") {
            await client.end();
        }
    }
}
 
main().catch((err) => {
    console.error(
        'An error occurred while attempting to seed the database:',
        err,
    );
});
  