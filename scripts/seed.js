const { db } = require('@vercel/postgres');
const bcrypt = require('bcrypt');
const { users, patients } = require('../src/app/lib/data/placeholderData.js');
const { separateFullName, toTitleCase, checkAndConvertDate } = require('../src/app/lib/utils-module.js');
 
async function createUsers(client) {
    try {
        await client.sql`CREATE EXTENSION IF NOT EXISTS "uuid-ossp"`;
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS users (
          id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
          name VARCHAR(255) NOT NULL,
          email TEXT NOT NULL UNIQUE,
          password TEXT NOT NULL
        );
        `;
        console.log(`Created "users" table`);
      
        // Insert data into the "users" table
        const insertedUsers = await Promise.all(
            users.map(async (user) => {
            const hashedPassword = await bcrypt.hash(user.password, 10);
            return client.sql`
            INSERT INTO users (name, email, password)
            VALUES (${user.name}, ${user.email}, ${hashedPassword})
            ON CONFLICT (id) DO NOTHING;
            `;
            }),
        );
    
        console.log(`Seeded ${insertedUsers.length} users`);
    
        return {
            createTable,
            users: insertedUsers,
        };        

    } catch(error) {
        console.error('Error with Database interaction:', error);
        throw error;
    }
}

async function alterCurrentTablesTo(client) {
    try {

        const alterTable = await client.sql`
            BEGIN;
                ALTER TABLE patients RENAME TO patients1;
                ALTER TABLE medical_records RENAME TO medical_records1;
                ALTER TABLE dental_records RENAME TO dental_records1;
                ALTER TABLE treatment_records RENAME TO treatment_records1;

                ALTER TABLE patients2 RENAME TO patients;
                ALTER TABLE medical_records2 RENAME TO medical_records;
                ALTER TABLE dental_records2 RENAME TO dental_records;
                ALTER TABLE treatment_records2 RENAME TO treatment_records;
            COMMIT;
        `;

    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function resetData(client) {
    try {

        const alterTable = await client.sql`
            BEGIN;
                DROP TABLE patients;
                DROP TABLE medical_records;
                DROP TABLE dental_records;
                DROP TABLE treatment_records;
            COMMIT;
        `;

        await createPatients(client, false);
        await createMedicalRecords(client, false);
        await createDentalRecords(client, false);
        await createTreatementRecords(client, false);

    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function createPatients(client, insertData = true) {
    try {
        // drop table patients;
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS patients (
            id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,          
            first_name VARCHAR(100) NOT NULL,
            middle_name VARCHAR(255) NOT NULL,
            last_name VARCHAR(100) NOT NULL,
            birth_year INT NOT NULL,
            gender VARCHAR(255) NOT NULL,
            address VARCHAR(255) NOT NULL,
            phone VARCHAR(255) NOT NULL
        );
        `;
        console.log(`Created "patients" table`);
        let insertedPatients = null;

        if (insertData) {
        // Insert data into the "patients" table
            insertedPatients = await Promise.all(
                patients.map(
                    (patient) => {
                        const nNames = separateFullName(patient.name);
                        console.log(nNames);
                        return client.sql`
                            INSERT INTO patients (first_name, middle_name, last_name, birth_year, gender, address, phone)
                            VALUES (${nNames[0]}, ${nNames[1]}, ${nNames[2]}, ${patient.birth_year}, ${patient.gender}, ${patient.address}, ${patient.phone});
                        `
                    }
                ),
            );
            console.log(`Seeded ${insertedPatients.length} patients`);
        }

        return {
            createTable,
            users: insertedPatients,
        };

    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function createMedicalRecords(client, insertData = true) {
    try {
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS medical_records (
            pid INT PRIMARY KEY,
            height NUMERIC(3, 1) NOT NULL,
            weight INT NOT NULL,
            blood_pressure_sys INT NOT NULL,
            blood_pressure_dia INT NOT NULL,
            pulse INT NOT NULL,
            hospitalized BOOLEAN NOT NULL,
            hospitalized_declare VARCHAR(255),
            suffered JSON NOT NULL
        );
        `;
        console.log(`Created "medical_records" table`);

        let insertedMedicalInfo = null;

        if (insertData) {
            // Insert data into the "medical_records" table
            insertedMedicalInfo = await Promise.all(
                patients.map(
                    (patient) => client.sql`
                    INSERT INTO medical_records (pid, height, weight, blood_pressure_sys, blood_pressure_dia, pulse, hospitalized, hospitalized_declare, suffered)
                    VALUES (${patient.id}, ${patient.medicalInfo.height}, ${patient.medicalInfo.weight}, ${patient.medicalInfo.blood_pressure_sys}, 
                        ${patient.medicalInfo.blood_pressure_dia}, ${patient.medicalInfo.pulse}, ${patient.medicalInfo.hospitalized}, 
                        ${patient.medicalInfo.hospitalized_declare}, ${patient.medicalInfo.suffered});
                `,
                ),
            );
            console.log(`Seeded ${insertedMedicalInfo.length} patients`);
        }

        return {
            createTable,
            users: insertedMedicalInfo,
        };

    }catch(error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

async function createDentalRecords(client, insertData = true) {
    try {
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS dental_records (
            pid INT PRIMARY KEY,
            tooth_diagram text[][],
            description VARCHAR(255)
        );
        `;
        console.log(`Created "dental_records" table`);

        let insertedDentalRecords = null;

        if (insertData) {

            // Insert data into the "dental_records" table
            insertedDentalRecords = await Promise.all(
                patients.map(
                    (patient) => client.sql`
                    INSERT INTO dental_records (pid, tooth_diagram, description)
                    VALUES (${patient.id}, ${patient.dentalRecords.tooth_diagram}, ${patient.dentalRecords.description})
                    `,
                ),
            );
            console.log(`Seeded ${insertedDentalRecords.length} patients`);
        }

        return {
            createTable,
            info: insertedDentalRecords,
        };
    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}


async function insertTreatmentRecords(client, treatmentRecords, id) {
    const insertedTreatmentRecords = await Promise.all(
        treatmentRecords.map((record) => {
            const treatment = JSON.stringify(record.treatments);
            console.log(treatment);
            return client.sql`
                INSERT INTO treatment_records (pid, exam_date, diagnoses, treatments, amount, paid)
                VALUES (${id}, ${record.exam_date}, ${record.diagnoses}, 
                        ${treatment},
                        ${record.amount}, ${record.paid});

                `;
        })
        ,
    );

    console.log(`Seeded ${insertedTreatmentRecords.length} treatment_records`);
    console.log(insertedTreatmentRecords);
    return insertTreatmentRecords;
}

async function createTreatementRecords(client, insertData = true) {
    try {
        const createTable = await client.sql`
        CREATE TABLE IF NOT EXISTS treatment_records (
            pid INT NOT NULL,
            exam_date DATE NOT NULL, 
            diagnoses VARCHAR NOT NULL,
            treatments JSONB,
            amount INT NOT NULL,
            paid BOOLEAN NOT NULL,
            PRIMARY KEY (pid, exam_date)
        );
        `;
        console.log(`Created "treatment_records" table`);
        //console.log(createTable);

        let insertedTreatmentRecords = null;

        if (insertData) {
            // Insert data into the "treatment_records" table
            insertedTreatmentRecords = await Promise.all(
                patients.map((patient) => insertTreatmentRecords(client, patient.treatmentRecords, patient.id)),
            );

            console.log(`Seeded ${insertedTreatmentRecords.length} treatment_records`);
            console.log(insertedTreatmentRecords);
        }

        return {
            createTable,
            info: insertedTreatmentRecords,
        };
    }catch (error) {
        console.error('Error with Database: ', error);
        throw error;
    }
}

function test() {
    const [isD, nValue] = checkAndConvertDate('31/12/2024');
    
    console.log(`${isD} , ${nValue}`);

}

function test1() {
    const strs = ['TRAN'];
    const strss = strs.filter((str) => str != '');
    console.log(toTitleCase(strss.join('')));
    console.log(toTitleCase("HONG gia lINH"));
}

async function main1() {
    test();
    //test1();
}

async function main() {
    const client = await db.connect();
    await resetData(client);

    await client.end();
}

async function main3() {
    const client = await db.connect();
    
    //await createUsers(client);
    await createPatients(client);
    await createMedicalRecords(client);
    await createDentalRecords(client);
    await createTreatementRecords(client);
  
    await client.end();
  }
  
  main().catch((err) => {
    console.error(
      'An error occurred while attempting to seed the database:',
      err,
    );
  });
  