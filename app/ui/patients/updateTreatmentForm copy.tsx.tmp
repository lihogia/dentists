'use client';
import Link from "next/link";
import { useFormState } from 'react-dom';
import { useState } from "react";
import { formatCurrency, formatDateToLocal } from "@/app/lib/utils";
import { TreatmentRecordsForm, Task } from "@/app/lib/data/definition";
import Status from "@/app/ui/status";
import {
    CalendarDaysIcon,
    MagnifyingGlassIcon,
    CurrencyDollarIcon,
    MinusIcon,
    PlusIcon,
    InformationCircleIcon,
    PhoneIcon,
    HeartIcon,
    UserCircleIcon,
    ArrowUpIcon,
    ScaleIcon
  } from '@heroicons/react/24/outline';
import clsx from "clsx";
import { Button } from "@/app/ui/buttons";
import { updateTreatmentRecords, TreatmentState } from '@/app/lib/data/actions';

export default function UpdateTreatmentForm({
    treatmentRecords
}: {treatmentRecords: TreatmentRecordsForm[]}) {

    const initialState: TreatmentState = {
        errors: {},
        message: null
      };
    const [state, dispatch] = useFormState(updateTreatmentRecords, initialState);


    const initWorkingTreatment = {
        treatment: treatmentRecords[0],
        selectedIndex: 0
    }

    const [workingTreatment, setWorkingTreatment] = useState(initWorkingTreatment);

    const convertDate = (textDate: string) => {
        let isD: string = "true";
        let nDate: string = "";

        const [dd, mm, yyyy] = textDate.split('/');
        if (Number.parseInt(dd) < 1 || Number.parseInt(dd) > 31 ||
            Number.parseInt(mm) < 1 || Number.parseInt(mm) > 12) {
                isD = "false";
        }else {
            nDate = `${yyyy}-${mm}-${dd}`;
        }
        return [isD, nDate];
    }

    
    return (
        <form action={dispatch}>           
            <div className="mt-6 flow-root">
                <fieldset className="mb-4 mt-5" key={`${workingTreatment.treatment.exam_date}`}>
                    <legend className="mb-2 block text-sm font-medium">
                        Treatment for the examination on {formatDateToLocal(workingTreatment.treatment.exam_date)}
                    </legend>
                    {state && 
                    <div id="patient-error" aria-live="polite" aria-atomic="true">
                    {state.errors?.status &&
                    state.errors?.status.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}
                    {state.errors?.id &&
                    state.errors?.id.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}
                    {state.errors?.diagnoses &&
                    state.errors?.diagnoses.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}
                    {state.errors?.old_exam_date &&
                    state.errors?.old_exam_date.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}

                    {state.errors?.exam_date &&
                    state.errors?.exam_date.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}

                    {state.errors?.amount &&
                    state.errors?.amount.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}
                    {state.errors?.paid &&
                    state.errors?.paid.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}
                    {state.errors?.treatments &&
                    state.errors?.treatments.map((error: string) => (
                        <p className="mt-2 text-sm text-red-500" key={error}>
                        {error}
                        </p>
                    ))}

                    <hr/>
                    <p className="mt-2 text-sm text-red-500">
                        {state.message}
                    </p>
                </div>
                    }
                    <div className="border border-gray-100 bg-gray-200 w-full p-2 rounded-md">
                        <div className="bg-gray-200 p-2">
                            <label htmlFor="exam_date" className="mb-2 block text-sm font-medium">
                                Examination Date
                            </label>
                            <div className="relative">
                                <input type='text' name='status' defaultValue={workingTreatment.treatment.isCreated ? "create" : "edit"} />
                                <input type='text' name='id' defaultValue={workingTreatment.treatment.pid} />
                                <input type='text' name='old_exam_date' defaultValue={workingTreatment.treatment.exam_date} />
                                <input type="text" id="hid_exam_date" name="hid_exam_date" defaultValue={workingTreatment.treatment.exam_date}/>
                                <input type="text" id="hid_amount" name="hid_amount" defaultValue={workingTreatment.treatment.amount}/>
                                <textarea 
                                        key={`${workingTreatment.treatment.exam_date}_treatments`}
                                        id="hid_treatmentplan" 
                                        name="hid_treatmentplan" 
                                        defaultValue={JSON.stringify(workingTreatment.treatment.treatments)} 
                                        className="w-full"/>
                                <input
                                    id="exam_date"
                                    name="exam_date"
                                    type="text"
                                    className="peer block w-full rounded-md border border-gray-100 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500"
                                    placeholder="dd/mm/yyyy"
                                    defaultValue={formatDateToLocal(workingTreatment.treatment.exam_date)}
                                    pattern="[0-9]{2}/[0-9]{2}/[0-9]{4}"
                                    onChange={(e) => {
                                        const textValue = e.currentTarget.value;
                                        if (textValue.length != 10) {
                                            e.currentTarget.className = "peer block w-full rounded-md border-2 focus:bg-red-300 border-red-600 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500";
                                            return false;
                                        }

                                        const [isDate, newDate] = convertDate(textValue);
                                        if (isDate !== "true") {
                                            e.currentTarget.className = "peer block w-full rounded-md border-2 focus:bg-red-300 border-red-600 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500";
                                            return false;                                        
                                        }
                                        
                                        e.currentTarget.className = "peer block w-full rounded-md border border-gray-100 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500";
                                        const input_exam_date: HTMLInputElement = document.getElementById("hid_exam_date") as HTMLInputElement;                                    
                                        input_exam_date.value = newDate == null ? workingTreatment.treatment.exam_date : newDate;
                                    }}
                                />
                                <CalendarDaysIcon className="pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500" />
                            </div>
                        </div>
                        <div className="bg-gray-200 p-2">
                            <label htmlFor="diagnoses" className="mb-2 block text-sm font-medium">
                                Diagnoses
                            </label>
                            <div className="relative">
                                <textarea
                                    id="diagnoses"
                                    name="diagnoses"
                                    className="peer block w-full rounded-md border border-gray-100 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500"
                                    defaultValue={workingTreatment.treatment.diagnoses}
                                    onChange={(e) => {
                                    }}
                                />
                                <MagnifyingGlassIcon className="pointer-events-none absolute left-3 top-1/3 h-[18px] w-[18px] -translate-y-1/2 text-gray-500" />
                            </div>
                        </div>
                        <div className="bg-gray-200 p-2">
                            <label htmlFor="amount" className="mb-2 block text-sm font-medium">
                                Amount
                            </label>
                            <div className="relative">
                                <input
                                    id="amount"
                                    name="amount"
                                    type="text"
                                    inputMode="decimal"
                                    className="peer block w-full rounded-md border border-gray-100 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500"
                                    defaultValue={workingTreatment.treatment.amount}
                                    onChange={(e) => {
                                        let textValue = e.currentTarget.value;

                                        let nValue = Number.parseInt(textValue);
                                        if (isNaN(nValue)) {
                                            //console.log('NaN');
                                            e.currentTarget.className = "peer block w-full rounded-md border-2 focus:bg-red-300 border-red-600 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500";
                                            return false;
                                        }
                                        
                                        e.currentTarget.className = "peer block w-full rounded-md border border-gray-100 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500";
                                        const input_amount: HTMLInputElement = document.getElementById("hid_amount") as HTMLInputElement;                                    
                                        input_amount.value = `${nValue}`;

                                    }}
                                />
                                <CurrencyDollarIcon className="pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500" />
                            </div>
                        </div>
                        <div className="bg-gray-200 p-2">
                            <label htmlFor="paid" className="mb-2 block text-sm font-medium">
                                Payment
                            </label>
                            <div className="flex items-center px-3">
                                <input 
                                    id="paid" 
                                    name="paid" 
                                    type="checkbox" 
                                    value="true"
                                    defaultChecked={workingTreatment.treatment.paid}
                                    className="h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2"
                                    onChange={(e) => {
                                        const nTreatment = {
                                            ...workingTreatment.treatment,
                                            paid: e.currentTarget.checked
                                        }
                                        const nworkingTreatment = {
                                            ...workingTreatment,
                                            treatment: nTreatment
                                        }
                                        setWorkingTreatment(nworkingTreatment);
                                    }}
                                    />
                                <label 
                                    htmlFor="paid" 
                                    className="ml-2 flex cursor-pointer items-center gap-1.5 rounded-full px-2 py-1.5 text-xs font-medium text-gray-600">
                                    <Status status={workingTreatment.treatment.paid} text="Paid" />
                                </label>
                            </div>
                        </div>
                        <div className="bg-gray-200 p-2">
                            <div className="bg-gray-200 p-1 pb-1">
                                <span className="mb-2 block text-sm font-medium">
                                    Treatment Plan
                                </span>
                            </div>
                            <div className="md:hidden">
                                {workingTreatment.treatment.treatments.map((treatment, index) => (
                                    <div key={`m_treatment_${workingTreatment.treatment.exam_date}_${index}`} className="flex items-center justify-between border-b pb-4 p-2 bg-white rounded-md mb-1">
                                        <div>
                                            <div className="mb-2 flex items-center">
                                                <p className="text-md">
                                                    {treatment.cure}
                                                </p>
                                            </div>
                                            <p className="text-sm text-gray-500">{formatDateToLocal(treatment.cure_date)}</p>
                                        </div>
                                        <Status status={treatment.status} text="Done" />
                                        {/*
                                        <PatientStatus status={patient.status} />
                                        */
                                        }
                                    </div>
                                )
                                )}
                            </div>
                            <table className="hidden md:table min-w-full bg-gray-100 rounded-md">
                                <thead className="rounded-lg text-left text-sm font-normal">
                                    <tr>
                                        <td className="p-2">Cure</td>
                                        <td className="p-2">Date</td>
                                        <td className="p-2">Status</td>
                                    </tr>
                                </thead>
                                <tbody className="text-sm">
                                    {workingTreatment.treatment.treatments.map((treatment, index) => {
                                        return (
                                            <tr key={`treatment_${workingTreatment.treatment.exam_date}_${index}`} className="bg-white">
                                                <td className="p-2">
                                                    <input 
                                                        id={`treatment_cure_${index}`}
                                                        name={`treatment_cure_${index}`}
                                                        type="text"
                                                        defaultValue={treatment.cure}
                                                        className="p-2 cursor-pointer border-2 border-gray-300 bg-white rounded-md w-full mr-2"
                                                        onChange={(e) => {
                                                            const input_TreatmentPlan = document.getElementById("hid_treatmentplan") as HTMLTextAreaElement;
                                                            const newTreatment = {
                                                                ...treatment
                                                            }
                                                            newTreatment.cure = e.currentTarget.value;
                                                            const nTreatmentPlan = [...workingTreatment.treatment.treatments];
                                                            nTreatmentPlan[index] = newTreatment;
                                                            input_TreatmentPlan.value = JSON.stringify(nTreatmentPlan);
                                                        }}
                                                    />    
                                                </td>
                                                <td className="p-2">
                                                    <input 
                                                        id={`treatment_cure_date_${index}`}
                                                        name={`treatment_cure_date_${index}`}
                                                        type="text"
                                                        defaultValue={formatDateToLocal(treatment.cure_date)}
                                                        className="p-2 cursor-pointer border-2 border-gray-300 bg-white rounded-md w-full mr-2"
                                                        onChange={(e) => {
                                                            const textValue = e.currentTarget.value;
                                                            if (textValue.length != 10) {
                                                                e.currentTarget.className = "p-2 cursor-pointer focus:bg-red-300 border-2 border-red-600 bg-white rounded-md w-full mr-2";
                                                                return false;
                                                            }
                        
                                                            const [isDate, newDate] = convertDate(textValue);
                                                            if (isDate !== "true") {
                                                                e.currentTarget.className = "p-2 cursor-pointer focus:bg-red-300 border-2 border-red-600 bg-white rounded-md w-full mr-2";
                                                                return false;                                        
                                                            }
                                                            
                                                            e.currentTarget.className = "p-2 cursor-pointer border-2 border-gray-300 bg-white rounded-md w-full mr-2";

                                                            const input_TreatmentPlan = document.getElementById("hid_treatmentplan") as HTMLTextAreaElement;
                                                            const newTreatment = {
                                                                ...treatment
                                                            }
                                                            newTreatment.cure_date = newDate;
                                                            const nTreatmentPlan = [...workingTreatment.treatment.treatments];
                                                            nTreatmentPlan[index] = newTreatment;
                                                            input_TreatmentPlan.value = JSON.stringify(nTreatmentPlan);
                                                        }}
                                                    />    
                                                </td>
                                                <td className="p-2">
                                                    <div className="flex items-center px-3">
                                                    <input 
                                                        id={`treatment_status_${index}`}
                                                        name={`treatment_status_${index}`}
                                                        type="checkbox"
                                                        value="true"
                                                        defaultChecked={treatment.status}
                                                        className="cursor-pointer border-2 border-gray-300 bg-white rounded-md"
                                                        onChange={(e) => {
                                                            const input_TreatmentPlan = document.getElementById("hid_treatmentplan") as HTMLTextAreaElement;
                                                            const newTreatment = {
                                                                ...treatment
                                                            }
                                                            newTreatment.status = e.currentTarget.checked;
                                                            const nTreatmentPlan = [...workingTreatment.treatment.treatments];
                                                            nTreatmentPlan[index] = newTreatment;
                                                            input_TreatmentPlan.value = JSON.stringify(nTreatmentPlan);

                                                            const nTreatments = [...workingTreatment.treatment.treatments];
                                                            nTreatments[index].status = e.currentTarget.checked;
                                                            const nworkingTreatment = {
                                                                ...workingTreatment
                                                            }
                                                            nworkingTreatment.treatment.treatments = nTreatments;
                                                            setWorkingTreatment(nworkingTreatment);
                                                        }}
                                                    /> 
                                                    <label 
                                                        htmlFor={`treatment_status_${index}`} 
                                                        className="flex cursor-pointer items-center rounded-full px-2 font-medium text-gray-600">
                                                        <Status status={treatment.status} text="Done" />
                                                    </label>
                                                    </div>
                                                </td>
                                            </tr>
                                        );
                                    })
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </fieldset>
            </div>
            <div className="mt-2 flex justify-start gap-4">
                <Link
                    href="/dashboard/patients"
                    className="flex h-10 items-center rounded-lg bg-gray-100 px-4 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-200"
                    >
                    Cancel
                </Link>
                <Button type="submit">Save Treatment</Button>
                <Link
                    href={`/dashboard/patients/${workingTreatment.treatment.pid}/view`}
                    className="flex h-10 items-center rounded-lg bg-blue-300 px-4 text-sm font-medium text-gray-600 transition-colors hover:bg-blue-400 hover:text-white"
                    >
                    Done
                </Link>
            </div>
        </form>
    );
}